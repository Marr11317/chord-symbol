import parseChord from '../../src/parseChord';
import intervalsToSemitones from '../../src/intervalsToSemitones';

const allCases = [
	[ 'C5',						'C', ['1', '5'] ],
	[ 'C(omit3)',				'C', ['1', '5'] ],
	[ 'Csus',					'C', ['1', '4', '5'] ],
	[ 'Csus4',					'C', ['1', '4', '5'] ],
	[ 'C(b5)',					'C', ['1', '3', 'b5'] ],
	[ 'C',						'C', ['1', '3', '5'] ],
	[ 'C+',						'C', ['1', '3', '#5'] ],
	[ 'Caug',					'C', ['1', '3', '#5'] ],
	[ 'C6(b5)',					'C', ['1', '3', 'b5', '6'] ],
	[ 'C6',						'C', ['1', '3', '5', '6'] ],
	[ 'C6(#5)',					'C', ['1', '3', '#5', '6'] ],
	[ 'C69',					'C', ['1', '3', '5', '6', '9'] ],
	[ 'C69(#11)',				'C', ['1', '3', '5', '6', '9', '#11'] ],
	[ 'Cma6(b5)',				'C', ['1', '3', 'b5', '6'] ],
	[ 'Cma6',					'C', ['1', '3', '5', '6'] ],
	[ 'Cma69',					'C', ['1', '3', '5', '6', '9'] ],
	[ 'Cma6(#5)',				'C', ['1', '3', '#5', '6'] ],
	[ 'Cma7(b5)',				'C', ['1', '3', 'b5', '7'] ],
	[ 'Cma7',					'C', ['1', '3', '5', '7'] ],
	[ 'Cma7(#5)',				'C', ['1', '3', '#5', '7'] ],
	[ 'Cadd9(omit3)',			'C', ['1', '5', '9'] ],
	[ 'Cadd9(no3)',				'C', ['1', '5', '9'] ],
	[ 'Cadd9',					'C', ['1', '3', '5', '9'] ],
	[ 'C(add9)',				'C', ['1', '3', '5', '9'] ],
	[ 'Cma9(no3)',				'C', ['1', '5', '7', '9'] ],
	[ 'Cma9',					'C', ['1', '3', '5', '7', '9'] ],
	[ 'Cma9(#11)',				'C', ['1', '3', '5', '7', '9', '#11'] ],
	[ 'Cma9(omit3)',			'C', ['1', '5', '7', '9'] ],
	[ 'Cma13(#11)',				'C', ['1', '3', '5', '7', '9', '#11', '13'] ],
	[ 'Cmi7',					'C', ['1', 'b3', '5', 'b7'] ],
	[ 'Cmi9',					'C', ['1', 'b3', '5', 'b7', '9'] ],
	[ 'Cmi11',					'C', ['1', 'b3', '5', 'b7', '9', '11'] ],
	[ 'Cmi7(add11)',			'C', ['1', 'b3', '5', 'b7', '11'] ],
	[ 'Cmi13',					'C', ['1', 'b3', '5', 'b7', '9', '11', '13'] ],
	[ 'CÂ°',						'C', ['1', 'b3', 'b5'] ],
	[ 'Cmi(#5)',				'C', ['1', 'b3', '#5'] ],
	[ 'Cmi7(b5)',				'C', ['1', 'b3', 'b5', 'b7'] ],
	[ 'Cmi7(#5)',				'C', ['1', 'b3', '#5', 'b7'] ],
	[ 'Cmi7(b5,#5)',			'C', ['1', 'b3', 'b5', '#5', 'b7'] ],
	[ 'Cmi9(b5)',				'C', ['1', 'b3', 'b5', 'b7', '9'] ],
	[ 'Cmi11(b5)',				'C', ['1', 'b3', 'b5', 'b7', '9', '11'] ],
	[ 'Cmi7(b5,add11)',			'C', ['1', 'b3', 'b5', 'b7', '11'] ],
	[ 'Cmi11(b5,no3)',			'C', ['1', 'b5', 'b7', '9', '11'] ],
	[ 'Cmi11(b5,b13)',			'C', ['1', 'b3', 'b5', 'b7', '9', '11', 'b13'] ],
	[ 'Cmi',					'C', ['1', 'b3', '5'] ],
	[ 'Cmi6',					'C', ['1', 'b3', '5', '6'] ],
	[ 'CmiMa7',					'C', ['1', 'b3', '5', '7'] ],
	[ 'Cmi add9',				'C', ['1', 'b3', '5', '9'] ],
	[ 'Cmi(add9)',				'C', ['1', 'b3', '5', '9'] ],
	[ 'Cmi69',					'C', ['1', 'b3', '5', '6', '9'] ],
	[ 'CmiMa9',					'C', ['1', 'b3', '5', '7', '9'] ],
	[ 'CmiMa9(add13)',			'C', ['1', 'b3', '5', '7', '9', '13'] ],
	[ 'Cmi69(add11)',			'C', ['1', 'b3', '5', '6', '9', '11'] ],
	[ 'CmiMa11',				'C', ['1', 'b3', '5', '7', '9', '11'] ],
	[ 'CmiMa13',				'C', ['1', 'b3', '5', '7', '9', '11', '13'] ],
	[ 'C7',						'C', ['1', '3', '5', 'b7'] ],
	[ 'C9',						'C', ['1', '3', '5', 'b7', '9'] ],
	[ 'C9(13)',					'C', ['1', '3', '5', 'b7', '9', '13'] ],
	[ 'C9(add13)',				'C', ['1', '3', '5', 'b7', '9', '13'] ],
	[ 'C11',					'C', ['1', '4', '5', 'b7', '9'] ],
	[ 'C13',					'C', ['1', '3', '5', 'b7', '9', '13'] ],
	[ 'C7sus',					'C', ['1', '4', '5', 'b7'] ],
	[ 'C9sus',					'C', ['1', '4', '5', 'b7', '9'] ],
	[ 'C13sus',					'C', ['1', '4', '5', 'b7', '9', '13'] ],
	[ 'C7(b5)',					'C', ['1', '3', 'b5', 'b7'] ],
	[ 'C9(b5)',					'C', ['1', '3', 'b5', 'b7', '9'] ],
	[ 'C7(#11)',				'C', ['1', '3', '5', 'b7', '#11'] ],
	[ 'C9(#11)',				'C', ['1', '3', '5', 'b7', '9', '#11'] ],
	[ 'C13(#11)',				'C', ['1', '3', '5', 'b7', '9', '#11', '13'] ],
	[ 'C7(b9)',					'C', ['1', '3', '5', 'b7', 'b9'] ],
	[ 'C7(#9)',					'C', ['1', '3', '5', 'b7', '#9'] ],
	[ 'C7(b9,#9)',				'C', ['1', '3', '5', 'b7', 'b9', '#9'] ],
	[ 'C7(b9,#11)',				'C', ['1', '3', '5', 'b7', 'b9', '#11'] ],
	[ 'C7(#9,#11)',				'C', ['1', '3', '5', 'b7', '#9', '#11'] ],
	[ 'C7(b9,#9,#11)',			'C', ['1', '3', '5', 'b7', 'b9', '#9', '#11'] ],
	[ 'C13(b9)',				'C', ['1', '3', '5', 'b7', 'b9', '13'] ],
	[ 'C13(#9)',				'C', ['1', '3', '5', 'b7', '#9', '13'] ],
	[ 'C13(b9,#9)',				'C', ['1', '3', '5', 'b7', 'b9', '#9', '13'] ],
	[ 'C13(b9,#11)',			'C', ['1', '3', '5', 'b7', 'b9', '#11', '13'] ],
	[ 'C13(#9,#11)',			'C', ['1', '3', '5', 'b7', '#9', '#11', '13'] ],
	[ 'C13(b9,#9,#11)',			'C', ['1', '3', '5', 'b7', 'b9', '#9', '#11', '13'] ],
	[ 'C7(#5)',					'C', ['1', '3', '#5', 'b7'] ],
	[ 'C7(#5,b9)',				'C', ['1', '3', '#5', 'b7', 'b9'] ],
	[ 'C7(#5,#9)',				'C', ['1', '3', '#5', 'b7', '#9'] ],
	[ 'C7(#5,b9,#9)',			'C', ['1', '3', '#5', 'b7', 'b9', '#9'] ],
	[ 'C7(#5,b9,#11)',			'C', ['1', '3', '#5', 'b7', 'b9', '#11'] ],
	[ 'C7(#5,#9,#11)',			'C', ['1', '3', '#5', 'b7', '#9', '#11'] ],
	[ 'C7(#5,b9,#9,#11)',		'C', ['1', '3', '#5', 'b7', 'b9', '#9', '#11'] ],
	[ 'C7(b13)',				'C', ['1', '3', '5', 'b7', 'b13'] ],
	[ 'C7(b9,b13)',				'C', ['1', '3', '5', 'b7', 'b9', 'b13'] ],
	[ 'C7(#9,b13)',				'C', ['1', '3', '5', 'b7', '#9', 'b13'] ],
	[ 'C7(b9,#9,b13)',			'C', ['1', '3', '5', 'b7', 'b9', '#9', 'b13'] ],
	[ 'C7(b9,#11,b13)',			'C', ['1', '3', '5', 'b7', 'b9', '#11', 'b13'] ],
	[ 'C7(#9,#11,b13)',			'C', ['1', '3', '5', 'b7', '#9', '#11', 'b13'] ],
	[ 'C7(b9,#9,#11,b13)', 		'C', ['1', '3', '5', 'b7', 'b9', '#9', '#11', 'b13'] ],
	[ 'Cdim',					'C', ['1', 'b3', 'b5'] ],
	[ 'Cdim7',					'C', ['1', 'b3', 'b5', 'bb7'] ],
	[ 'Cdim7(add ma7)',			'C', ['1', 'b3', 'b5', 'bb7', '7'] ],
	[ 'Cdim7(add ma7,9)',		'C', ['1', 'b3', 'b5', 'bb7', '7', '9'] ],
	[ 'Cdim7(add ma7,9,11)',	'C', ['1', 'b3', 'b5', 'bb7', '7', '9', '11'] ],
	[ 'Cdim7(add ma7,9,11,b13)','C', ['1', 'b3', 'b5', 'bb7', '7', '9', '11', 'b13'] ],
	[ 'Cdim7(add ma7,11)',		'C', ['1', 'b3', 'b5', 'bb7', '7', '11'] ],
	[ 'Cdim7(add ma7,9,b13)',	'C', ['1', 'b3', 'b5', 'bb7', '7', '9', 'b13'] ],
	[ 'Cdim7(add ma7,b13)',		'C', ['1', 'b3', 'b5', 'bb7', '7', 'b13'] ],
	[ 'Cdim7(add 9)',			'C', ['1', 'b3', 'b5', 'bb7', '9'] ],
	[ 'Cdim7(add 9,11)',		'C', ['1', 'b3', 'b5', 'bb7', '9', '11'] ],
	[ 'Cdim7(add 9,11,b13)',	'C', ['1', 'b3', 'b5', 'bb7', '9', '11', 'b13'] ],
	[ 'Cdim7(add 9,b13)',		'C', ['1', 'b3', 'b5', 'bb7', '9', 'b13'] ],
	[ 'Cdim7(add 11)',			'C', ['1', 'b3', 'b5', 'bb7', '11'] ],
	[ 'Cdim7(add 11,b13)',		'C', ['1', 'b3', 'b5', 'bb7', '11', 'b13'] ],
	[ 'Cdim7(add b13)',			'C', ['1', 'b3', 'b5', 'bb7', 'b13'] ],

];




describe('Contemporary Music Theory - All chords symbols', () => {

	describe.each(allCases)('%s', (input, rootNote, allIntervals, bassNote) => {
		test('is parsed: ' + allIntervals.join(' '), () => {
			const parsed = parseChord(input);
			console.log(parsed);
			expect(parsed.semitones).toEqual(allIntervals.map(interval => intervalsToSemitones[interval]));
			expect(parsed.rootNote).toEqual(rootNote);
			expect(parsed.bassNote).toEqual(bassNote);
		});
	});

});
