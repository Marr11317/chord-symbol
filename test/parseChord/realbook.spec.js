import parseChord from '../../src/parseChord';
import intervalsToSemitones from '../../src/intervalsToSemitones';

const allCases = [
	[ 'C bass', 			'C', [ '1' ] ],
	[ 'C', 					'C', [ '1', '3', '5' ] ],
	[ 'CSUS', 				'C', [ '1', '4', '5' ] ],
	[ 'C+', 				'C', [ '1', '3', '#5' ] ],
	[ 'C6', 				'C', [ '1', '3', '5', '6' ] ],
	[ 'C6/9', 				'C', [ '1', '3', '5', '6', '9' ] ],
	[ 'CMA7(b5)', 			'C', [ '1', '3', 'b5', '7' ] ],
	[ 'C#MA7SUS(b5)', 		'C#',[ '1', '4', 'b5', '7' ] ],
	[ 'CMA7', 				'C', [ '1', '3', '5', '7' ] ],
	[ 'CMA7(#5)', 			'C', [ '1', '3', '#5', '7' ] ],
	[ 'CMA7(#11)', 			'C', [ '1', '3', '5', '7', '#11' ] ],
	[ 'C(add 9,omit 3)',	'C', [ '1', '5', '9' ] ],
	[ 'C(add 9)',			'C', [ '1', '3', '5', '9' ] ],
	[ 'CMA9', 				'C', [ '1', '3', '5', '7', '9' ] ],
	[ 'CMA9(#11)', 			'C', [ '1', '3', '5', '7', '9', '#11' ] ],
	[ 'CMA7(add 13)', 		'C', [ '1', '3', '5', '7', '13' ] ],
	[ 'CMA13', 				'C', [ '1', '3', '5', '7', '9', '13' ] ],
	[ 'CMA13(#11)', 		'C', [ '1', '3', '5', '7', '9', '#11', '13' ] ],
	[ 'Bb(add 9,add b13)', 	'Bb',[ '1', '3', '5', '9', 'b13' ] ],
	[ 'A+(add b9,add #9)',	'A', [ '1', '3', '#5', 'b9', '#9' ] ],
	[ 'CMI7', 				'C', [ '1', 'b3', '5', 'b7' ] ],
	[ 'CMI7(omit 5)', 		'C', [ '1', 'b3', 'b7' ] ],
	[ 'CMI9', 				'C', [ '1', 'b3', '5', 'b7', '9' ] ],
	[ 'CMI11', 				'C', [ '1', 'b3', '5', 'b7', '9', '11' ] ],
	[ 'CMI7(add 11)', 		'C', [ '1', 'b3', '5', 'b7', '11' ] ],
	[ 'CMI13', 				'C', [ '1', 'b3', '5', 'b7', '9', '11', '13' ] ],
	[ 'CMI7(add 13)', 		'C', [ '1', 'b3', '5', 'b7', '13' ] ],
	[ 'G#MI7(add 11, omit 5)','G#', [ '1', 'b3', 'b7', '11' ] ],
	[ 'Cdim.', 				'C', [ '1', 'b3', 'b5' ] ],
	[ 'CMI7(b5)', 			'C', [ '1', 'b3', 'b5', 'b7' ] ],
	[ 'CMI9(b5)', 			'C', [ '1', 'b3', 'b5', 'b7', '9' ] ],
	[ 'CMI11(b5)',			'C', [ '1', 'b3', 'b5', 'b7', '9', '11' ] ],
	[ 'CMI', 				'C', [ '1', 'b3', '5' ] ],
	[ 'CMI6', 				'C', [ '1', 'b3', '5', '6' ] ],
	[ 'CMI(MA7)', 			'C', [ '1', 'b3', '5', '7' ] ],
	[ 'CMI(add9)', 			'C', [ '1', 'b3', '5', '9' ] ],
	[ 'CMI6/9', 			'C', [ '1', 'b3', '5', '6', '9' ] ],
	[ 'C7', 				'C', [ '1', '3', '5', 'b7' ] ],
	[ 'C7(omit 3)', 		'C', [ '1', '5', 'b7' ] ],
	[ 'C9', 				'C', [ '1', '3', '5', 'b7', '9' ] ],
	[ 'C13', 				'C', [ '1', '3', '5', 'b7', '9', '13' ] ],
	[ 'C7SUS', 				'C', [ '1', '4', '5', 'b7' ] ],
	[ 'F#7SUS(add 3)', 		'F#',[ '1', '3', '4', '5', 'b7' ] ],
	[ 'C9SUS', 				'C', [ '1', '4', '5', 'b7', '9' ] ],
	[ 'C13SUS', 			'C', [ '1', '4', '5', 'b7', '9', '13' ] ],
	[ 'C7(b5)', 			'C', [ '1', '3', 'b5', 'b7' ] ],
	[ 'C7(b5,b9)', 			'C', [ '1' , '3', 'b5', 'b7', 'b9'] ],
	[ 'C9(b5)', 			'C', [ '1', '3', 'b5', 'b7', '9' ] ],
	[ 'C13(b5)', 			'C', [ '1', '3', 'b5', 'b7', '9', '13' ] ],
	[ 'C7(#11)', 			'C', [ '1', '3', '5', 'b7', '#11' ] ],
	[ 'C9(#11)', 			'C', [ '1', '3', '5', 'b7', '9', '#11' ] ],
	[ 'C13(#11)', 			'C', [ '1', '3', '5', 'b7', '9', '#11', '13' ] ],
	[ 'C7(b9)', 			'C', [ '1', '3', '5', 'b7', 'b9' ] ],
	[ 'C7(#9)', 			'C', [ '1', '3', '5', 'b7', '#9' ] ],
	[ 'C7(b9,#11)', 		'C', [ '1', '3', '5', 'b7', 'b9', '#11' ] ],
	[ 'C7(#9,#11)', 		'C', [ '1', '3', '5', 'b7', '#9', '#11' ] ],
	[ 'C7SUS(b9)', 			'C', [ '1', '4', '5', 'b7', 'b9' ] ],
	[ 'C13SUS(b9)', 		'C', [ '1', '4', '5', 'b7', 'b9', '13' ] ],
	[ 'C13(b9)', 			'C', [ '1', '3', '5', 'b7', 'b9', '13' ] ],
	[ 'C13(#11)', 			'C', [ '1', '3', '5', 'b7', '9', '#11', '13' ] ],
	[ 'C7(#5)', 			'C', [ '1', '3', '#5', 'b7' ] ],
	[ 'C7(#5,b9)', 			'C', [ '1', '3', '#5', 'b7', 'b9' ] ],
	[ 'C7(#5,#9)', 			'C', [ '1', '3', '#5', 'b7', '#9' ] ],
	[ 'C9(#5)', 			'C', [ '1', '3', '#5', 'b7', '9' ] ],
	[ 'C°7', 				'C', [ '1', 'b3', 'b5', 'bb7' ] ],
	[ 'C°7(add MA7)', 		'C', [ '1', 'b3', 'b5', 'bb7', '7' ] ],
	[ 'C/E', 				'C', [ '1', '3', '5' ], 'E' ],
	[ 'C/G', 				'C', [ '1', '3', '5' ], 'G' ],
	[ 'E/C', 				'E', [ '1', '3', '5' ], 'C' ],
	[ 'Bb/C', 				'Bb',[ '1', '3', '5' ], 'C' ],
	[ 'C(add 9)/E', 		'C', [ '1', '3', '5', '9' ], 'E' ],
	[ 'F/F#', 				'F', [ '1', '3', '5' ], 'F#' ],
	[ 'E+/G', 				'E', [ '1', '3', '#5' ], 'G' ],
	[ 'G7SUS/A', 			'G', [ '1', '4', '5', 'b7' ], 'A' ],
	[ 'GMA7(#5)/F#', 		'G', [ '1', '3', '#5', '7' ], 'F#' ],
	[ 'EbMA7(#5)/F', 		'Eb',[ '1', '3', '#5', '7' ], 'F' ],
	[ 'BMA7SUS/F#', 		'B', [ '1', '4', '5', '7' ], 'F#' ],
	/* * /
	/* */
];

describe('Realbook chords', () => {

	describe.each(allCases)('%s', (input, rootNote, allIntervals, bassNote) => {
		test('is parsed: ' + allIntervals.join(' '), () => {
			const parsed = parseChord(input);

			expect(parsed.semitones).toEqual(allIntervals.map(interval => intervalsToSemitones[interval]));
			expect(parsed.semitones).toEqual(allIntervals.map(interval => intervalsToSemitones[interval]));
			expect(parsed.rootNote).toEqual(rootNote);
			expect(parsed.bassNote).toEqual(bassNote);
		});
	});

});
